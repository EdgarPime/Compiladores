/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * interfaz.java
 *
 * Created on 21/08/2018, 07:44:27 AM
 */

package analizador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Edgar
 */
public class interfaz extends javax.swing.JFrame {
    
     public File Archivo;
     public String ubicacion,out;
        
    /** Creates new form interfaz */
    List<identificador> tokenslist;
    public interfaz() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Analizar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Ubicacion");

        jLabel2.setText("Resultado");

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Buscar Archivo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jButton1)
                .addGap(114, 114, 114)
                .addComponent(jButton2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 158, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)))
                        .addGap(12, 12, 12)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jButton3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
             probarArchivoLexer();
        }
        catch (IOException ex){
            System.out.println(ex.getMessage());
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jTextField1.setText("");
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         String Direccion = System.getProperty("user.home");
        JFileChooser Seleccionar = new JFileChooser(Direccion + "/Desktop");
        Seleccionar.addChoosableFileFilter(new FileNameExtensionFilter("Archivo de Texto (.php)", "php"));
        Seleccionar.addChoosableFileFilter(new FileNameExtensionFilter("Archivo de Texto (.txt)", "txt"));        
        Seleccionar.setAcceptAllFileFilterUsed(false);
        Seleccionar.showDialog(this,"Seleccionar");
        Archivo = Seleccionar.getSelectedFile();
        ubicacion = Archivo.getAbsolutePath();
        jTextField1.setText(ubicacion);
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }
    public void LecturaArchivo() throws FileNotFoundException, IOException{
    
        
        File fichero=new File(ubicacion);
        
            String linea;
            if (fichero.exists()) {
                FileReader archivo =new FileReader(ubicacion);
                BufferedReader leer =new BufferedReader(archivo);
                linea=leer.readLine();
                
                while(linea!=null){
                    //writer.println(linea.toLowerCase() + "\n");
                    linea=leer.readLine();
      
                }
            }
            
            //writer.close();
        
    }
    
    public void probarArchivoLexer() throws IOException{
        
        int cont=1,cont1=0,fila=0;
        char[] text;
        LecturaArchivo();
        if(jTextField1!=null){
            FileInputStream reader = new FileInputStream(ubicacion);
            Lexer lexer = new Lexer (reader);
            String resultado="";
            //String resultado1="";
            String errores="";
            
            PrintWriter writer1;
            out=ubicacion.substring(0, ubicacion.length()-3);
            File salida = new File (out+"out");
            writer1 = new PrintWriter(salida);
            
            while(true){
            Token token = lexer.yylex();
//           
            if (token ==null)
            {
             
                        
                //se imprime el archivo
                //indica que el archivo es correcto
                JOptionPane.showMessageDialog(null, "Â¡El archivo es correto, pertenece a MiniC#!");

                writer1.close();


                return;
            }
            
            
                switch(token) {
                    
                    case T_CONST_BOOLEANO:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        writer1.print(lexer.lexeme + "   linea "+cont+ "columnas sd" +" Token:" +token );
                      
                        break;
                        
                    case T_CONST_ENTERO:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                    
                    case T_CONST_DOUBLE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;    
                        
                    case T_CONST_STRING:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;     
                        
                    case T_VOID:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_INT:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;  
                        
                    case T_DOUBLE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_BOOL:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_STRING:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_CLASS:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_INTERFACE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_NULL:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_THIS:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break; 
                        
                    case T_EXTENDS:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_IMPLEMENTS:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_FOR:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_WHILE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila; 
                        break;
                        
                    case T_IF:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_ELSE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_RETURN:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_BREAK:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_NEW:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_NEWARRAY:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila; 
                        break;
                    
                    case T_SUMA:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_RESTA:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_MULTIPLICACION:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_DIVISION:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PROCENTAJE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_MENOR:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_MENORIGUAL:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_MAYOR:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_MAYORIGUAL:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_IGUAL:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_IGUALDAD:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_DIFERENTE:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_AND:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_OR:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_NEGACION:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PUNTOYCOMA:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_COMA:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PUNTO:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_CORCHIZQ:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_CORCHDER:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PARENIZQ:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PARENDER:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_LLAVEIZQ:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_LLAVEDER:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_CORCHETES:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_PARENTESIS:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_LLAVES:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;  
                        break;
                        
                    case T_IDENTIFICADOR:
                        resultado=resultado+"TOKEN: " + token + " " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        writer1.print(lexer.lexeme + "   linea "+cont+ " columnas:"+cont1+"-"+fila  +" Token: " +token + "\n");
                        cont1=fila;                        
                        break;
                        
                    case ENTER:
                        
                        cont++;
                        cont1=0;
                        
                        break;
                        
                    case WHITE:
                        cont1++;
                        break;
                        
                    case COMENTARIO1:
                        text=lexer.lexeme.toCharArray();
                        for (int i = 0; i < text.length; i++) {
                            if(text[i]=='\n')
                            {
                                cont++;
                            }
                        }
                            
                        
                        break;
                        
                    case COMENTARIO2:
                        text=lexer.lexeme.toCharArray();
                        for (int i = 0; i < text.length; i++) {
                            if(text[i]=='\n')
                            {
                                cont++;
                            }
                        }
                          
                        
                        break;
                                       
                    case ERROR:
                        resultado=resultado+ "Error, el token no pertenece a MiniC# " + lexer.lexeme + "\n";
                        jTextArea1.setText(resultado);
                        fila=lexer.lexeme.length()+cont1;
                        cont1=fila;  
                        writer1.print("*** Error linea " + cont+ ".*** El caracter: "+lexer.lexeme+ " ,No pertenece a MiniC# " + "\n");
                        
                        break;
                        
                        
              
                                     
                    default:
                        resultado=resultado+ "TOKEN: " + token   + "\n";
                        //writer1.print(token.toString().toLowerCase());
                }
                
            }
        }
        
       
        
        
        
 }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

}
